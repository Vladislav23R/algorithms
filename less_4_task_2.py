# Задача 2
# Написать два алгоритма нахождения i-го по счёту простого числа.
# Функция нахождения простого числа должна принимать на вход натуральное и возвращать соответствующее простое число.
# Проанализировать скорость и сложность алгоритмов.
#
# Первый — с помощью алгоритма «Решето Эратосфена».
# Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков.
# Используйте этот код и попробуйте его улучшить/оптимизировать под задачу.
#
# Второй — без использования «Решета Эратосфена».
# Примечание. Вспомните классический способ проверки числа на простоту.

# Первый вариант
def prime(n):
    result = []
    for i in range(MAX):
        if len(result) == n:
            return f'{result[n - 1]}'
        if a[i] == HOLE or a[i] == 1:
            continue
        result.append(i)
        j = i * 2
        while j < MAX:
            a[j] = HOLE
            j += i


MAX = 1000
HOLE = 0
a = [i for i in range(MAX)]
num = 100
print(prime(num))


# Вариант второй
def func(n):
    array = []
    for i in range(n ** 2):
        if len(array) == n:
            return f'{array[n - 1]}'
        if i == 0 or i == 1:
            continue
        for j in range(2, i):
            if i % j == 0:
                break
        else:
            array.append(i)


n = 100
print(func(n))
